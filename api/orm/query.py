# Code generated by sqlc. DO NOT EDIT.
# versions:
#   sqlc v1.27.0
# source: query.sql
import decimal
from typing import Any, AsyncIterator, Iterator, Optional

import sqlalchemy
import sqlalchemy.ext.asyncio

from orm import models


CREATE_COORDS_GPS = """-- name: create_coords_gps \\:one
INSERT INTO coords_gps (
    producer_id,
    latitude,
    longitude
) VALUES (
    :p1,
    :p2,
    :p3
) RETURNING producer_id, uid, latitude, longitude
"""


CREATE_PRODUCER = """-- name: create_producer \\:one
INSERT INTO producer (
    name
) VALUES (
    :p1
) RETURNING id, name
"""


GET_ALL_COORDS_GPS = """-- name: get_all_coords_gps \\:many
SELECT producer_id, uid, latitude, longitude FROM coords_gps
"""


GET_ALL_PRODUCERS = """-- name: get_all_producers \\:many
SELECT id, name FROM producer
"""


GET_ALL_TABLES = """-- name: get_all_tables \\:many
SELECT table_name FROM information_schema.tables WHERE table_schema = 'public'
"""


GET_COORDS_GPS_BY_PRODUCER_ID = """-- name: get_coords_gps_by_producer_id \\:one
SELECT producer_id, uid, latitude, longitude FROM coords_gps 
WHERE producer_id = :p1
"""


GET_PRODUCER_BY_NAME = """-- name: get_producer_by_name \\:one
SELECT id, name FROM producer 
WHERE name = :p1
"""


class Querier:
    def __init__(self, conn: sqlalchemy.engine.Connection):
        self._conn = conn

    def create_coords_gps(self, *, producer_id: int, latitude: decimal.Decimal, longitude: decimal.Decimal) -> Optional[models.CoordsGp]:
        row = self._conn.execute(sqlalchemy.text(CREATE_COORDS_GPS), {"p1": producer_id, "p2": latitude, "p3": longitude}).first()
        if row is None:
            return None
        return models.CoordsGp(
            producer_id=row[0],
            uid=row[1],
            latitude=row[2],
            longitude=row[3],
        )

    def create_producer(self, *, name: str) -> Optional[models.Producer]:
        row = self._conn.execute(sqlalchemy.text(CREATE_PRODUCER), {"p1": name}).first()
        if row is None:
            return None
        return models.Producer(
            id=row[0],
            name=row[1],
        )

    def get_all_coords_gps(self) -> Iterator[models.CoordsGp]:
        result = self._conn.execute(sqlalchemy.text(GET_ALL_COORDS_GPS))
        for row in result:
            yield models.CoordsGp(
                producer_id=row[0],
                uid=row[1],
                latitude=row[2],
                longitude=row[3],
            )

    def get_all_producers(self) -> Iterator[models.Producer]:
        result = self._conn.execute(sqlalchemy.text(GET_ALL_PRODUCERS))
        for row in result:
            yield models.Producer(
                id=row[0],
                name=row[1],
            )

    def get_all_tables(self) -> Iterator[Optional[Any]]:
        result = self._conn.execute(sqlalchemy.text(GET_ALL_TABLES))
        for row in result:
            yield row[0]

    def get_coords_gps_by_producer_id(self, *, producer_id: int) -> Optional[models.CoordsGp]:
        row = self._conn.execute(sqlalchemy.text(GET_COORDS_GPS_BY_PRODUCER_ID), {"p1": producer_id}).first()
        if row is None:
            return None
        return models.CoordsGp(
            producer_id=row[0],
            uid=row[1],
            latitude=row[2],
            longitude=row[3],
        )

    def get_producer_by_name(self, *, name: str) -> Optional[models.Producer]:
        row = self._conn.execute(sqlalchemy.text(GET_PRODUCER_BY_NAME), {"p1": name}).first()
        if row is None:
            return None
        return models.Producer(
            id=row[0],
            name=row[1],
        )


class AsyncQuerier:
    def __init__(self, conn: sqlalchemy.ext.asyncio.AsyncConnection):
        self._conn = conn

    async def create_coords_gps(self, *, producer_id: int, latitude: decimal.Decimal, longitude: decimal.Decimal) -> Optional[models.CoordsGp]:
        row = (await self._conn.execute(sqlalchemy.text(CREATE_COORDS_GPS), {"p1": producer_id, "p2": latitude, "p3": longitude})).first()
        if row is None:
            return None
        return models.CoordsGp(
            producer_id=row[0],
            uid=row[1],
            latitude=row[2],
            longitude=row[3],
        )

    async def create_producer(self, *, name: str) -> Optional[models.Producer]:
        row = (await self._conn.execute(sqlalchemy.text(CREATE_PRODUCER), {"p1": name})).first()
        if row is None:
            return None
        return models.Producer(
            id=row[0],
            name=row[1],
        )

    async def get_all_coords_gps(self) -> AsyncIterator[models.CoordsGp]:
        result = await self._conn.stream(sqlalchemy.text(GET_ALL_COORDS_GPS))
        async for row in result:
            yield models.CoordsGp(
                producer_id=row[0],
                uid=row[1],
                latitude=row[2],
                longitude=row[3],
            )

    async def get_all_producers(self) -> AsyncIterator[models.Producer]:
        result = await self._conn.stream(sqlalchemy.text(GET_ALL_PRODUCERS))
        async for row in result:
            yield models.Producer(
                id=row[0],
                name=row[1],
            )

    async def get_all_tables(self) -> AsyncIterator[Optional[Any]]:
        result = await self._conn.stream(sqlalchemy.text(GET_ALL_TABLES))
        async for row in result:
            yield row[0]

    async def get_coords_gps_by_producer_id(self, *, producer_id: int) -> Optional[models.CoordsGp]:
        row = (await self._conn.execute(sqlalchemy.text(GET_COORDS_GPS_BY_PRODUCER_ID), {"p1": producer_id})).first()
        if row is None:
            return None
        return models.CoordsGp(
            producer_id=row[0],
            uid=row[1],
            latitude=row[2],
            longitude=row[3],
        )

    async def get_producer_by_name(self, *, name: str) -> Optional[models.Producer]:
        row = (await self._conn.execute(sqlalchemy.text(GET_PRODUCER_BY_NAME), {"p1": name})).first()
        if row is None:
            return None
        return models.Producer(
            id=row[0],
            name=row[1],
        )
